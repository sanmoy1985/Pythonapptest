# -*- coding: utf-8 -*-
"""GUI_Generation_for_website.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/116xTf-3yTIFMV1p8XzBxVdZ8BWH4DgVW
"""

# # Import necessary libraries
# import cv2
# import numpy as np
# import matplotlib.pyplot as plt
# from ipywidgets import interact, widgets
# from IPython.display import display
# from PIL import Image
# import io
# import base64

# # Upload image widget
# image_upload = widgets.FileUpload(accept='image/*', multiple=False)

# # Threshold slider widgets
# threshold_slider = widgets.IntSlider(value=127, min=0, max=255, step=1, description="Threshold:")
# invert_checkbox = widgets.Checkbox(value=False, description="Invert Threshold")

# # Function to display the uploaded image and thresholded result
# def process_image(uploaded_image, threshold_value, invert):
#     # Convert the uploaded image to a NumPy array
#     img = Image.open(io.BytesIO(uploaded_image['content']))
#     img = np.array(img)

#     # Convert the image to grayscale
#     gray_image = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)

#     # Apply thresholding
#     _, thresholded_image = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_BINARY)

#     # Invert the image if checked
#     if invert:
#         thresholded_image = cv2.bitwise_not(thresholded_image)

#     # Display the original and thresholded images
#     plt.figure(figsize=(10, 5))
#     plt.subplot(1, 2, 1)
#     plt.title("Original Image")
#     plt.imshow(img)
#     plt.axis('off')

#     plt.subplot(1, 2, 2)
#     plt.title("Thresholded Image")
#     plt.imshow(thresholded_image, cmap='gray')
#     plt.axis('off')

#     plt.show()

# # Callback function for image upload and processing
# def on_upload_change(change):
#     if image_upload.value:
#         uploaded_image = list(image_upload.value.values())[0]
#         process_image(uploaded_image, threshold_slider.value, invert_checkbox.value)

# # Link the upload event
# image_upload.observe(on_upload_change, names='value')

# # Display the widgets
# display(image_upload, threshold_slider, invert_checkbox)

# Import necessary libraries
import cv2
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, widgets
from IPython.display import display
from google.colab.patches import cv2_imshow

# Function to apply thresholding for image segmentation
def threshold_segmentation(image_path, threshold_value):
    # Read the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Apply thresholding
    _, segmented_image = cv2.threshold(image, threshold_value, 255, cv2.THRESH_BINARY)

    # Display original and segmented images
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(segmented_image, cmap='gray')
    plt.title('Segmented Image')
    plt.axis('off')

    plt.show()

# Create a file upload widget for image input
upload_widget = widgets.FileUpload(accept="image/*", multiple=False)

# Create a slider for threshold value
threshold_slider = widgets.IntSlider(value=128, min=0, max=255, step=1, description="Threshold:")

# Define interaction between file upload and threshold slider
def on_upload_change(change):
    if upload_widget.value:
        # Get the uploaded image path
        uploaded_image = list(upload_widget.value.values())[0]
        with open("uploaded_image.jpg", "wb") as f:
            f.write(uploaded_image['content'])

        # Call the segmentation function
        threshold_segmentation("uploaded_image.jpg", threshold_slider.value)

# Bind the upload widget to the threshold function
upload_widget.observe(on_upload_change, names='value')

# Display widgets
display(upload_widget, threshold_slider)